## Event Management System

### Overview
The Event Management System is designed to allow users to browse, register, and manage events. It includes administrative functionalities to manage events and participants. Every user is also considered a participant in events they register for.

### Key Features
- **Admin**: Add, update, delete, and list events. Add, update, delete, and list participants. Generate reports.
- **User**: Browse and search events by type, date, and location. Register and unregister for events. View registered events.


### Main Class

**Purpose**: 
- The entry point for the application. It manages the main menu, user registration, and calls relevant methods for the admin and user menus.

**Key Methods**:
- `main(String[] args)`: The main method to start the application.
- `adminMenu(Scanner scanner, Admin admin)`: Handles the admin functionalities, such as managing events and participants.
- `userMenu(Scanner scanner, User user, EventManager eventManager)`: Handles the user functionalities, such as searching and registering for events.
- `searchMenu(Scanner scanner, User user, EventManager eventManager)`: Manages the search functionality for events.
- `isValidDate(String date)`: Validates the date format to ensure it's in `yyyy-mm-dd` format.
- `isValidEmail(String email)`: Validates the email format to ensure it adheres to standard patterns.


### User Class

**Purpose**: 
- Represents a user in the system. Handles all participant-related functionalities, such as event registration and management.

**Key Attributes**:
- `int id`: The unique identifier for the user.
- `String name`: The name of the user.
- `String email`: The email address of the user.
- `List<Event> registeredEvents`: A list of events the user is registered for.

**Key Methods**:
- `User(int id, String name, String email)`: Constructor to create a new user.
- `registerForEvent(EventManager eventManager, int eventId)`: Registers the user for a specified event.
- `unregisterFromEvent(EventManager eventManager, int eventId)`: Unregisters the user from a specified event.
- `listRegisteredEvents()`: Lists all events the user is registered for.


### EventManager Class

**Purpose**: 
- Manages all events in the system, including adding, updating, deleting, and searching events.

**Key Attributes**:
- `List<Event> events`: A list of all events managed by the system.

**Key Methods**:
- `addEvent(String name, String date, String location, String type)`: Adds a new event to the system.
- `updateEvent(int eventId, String name, String date, String location, String type)`: Updates an existing event's details.
- `deleteEvent(int eventId)`: Deletes an event from the system.
- `listEvents()`: Lists all events.
- `searchEventsByType(String type)`: Searches events based on their type.
- `getEventById(int eventId)`: Retrieves an event by its unique ID.




### Admin Class

**Purpose**: 
- Represents the admin user in the system, providing access to event and participant management.

**Key Attributes**:
- `EventManager eventManager`: An instance of the `EventManager` for managing events.
- `ParticipantManager participantManager`: An instance of the `ParticipantManager` for managing participants.

**Key Methods**:
- `addEvent(...)`: Adds a new event through the `EventManager`.
- `updateEvent(...)`: Updates an event through the `EventManager`.
- `deleteEvent(...)`: Deletes an event through the `EventManager`.
- `listEvents()`: Lists all events via the `EventManager`.
- `addParticipant(...)`: Adds a new participant.
- `updateParticipant(...)`: Updates participant details.
- `deleteParticipant(int participantId)`: Deletes a participant.
- `generateReport()`: Generates a report of all events and participants.


